{{- range .Values.celery.queues }}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-celery-{{ .name }}
  labels:
    app: {{ $.Release.Name }}-celery-{{ .name }}
    chart: {{ template "esgf-compute-wps.chart" $ }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
spec:
  replicas: {{ .replicas }}
  selector:
    matchLabels:
      app: {{ $.Release.Name }}-celery-{{ .name }}
      release: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}-celery-{{ .name }}
        chart: {{ template "esgf-compute-wps.chart" $ }}
        release: {{ $.Release.Name }}
        heritage: {{ $.Release.Service }}
    {{- if .annotations }}
      annotations:
      {{- .annotations | toYaml | trimSuffix "\n" | nindent 8 }}
    {{- end }}
    spec:
      serviceAccountName: wps-dask
      {{- if $.Values.celery.nodeSelector }}
      nodeSelector: 
        {{ $.Values.celery.nodeSelector | toYaml | trimSuffix "\n" }}
      {{- end }}
      containers:
      - name: {{ $.Release.Name }}-celery-{{ .name }}-backend
        image: {{ $.Values.celery.image }}:{{ $.Values.celery.imageTag }}
        imagePullPolicy: {{ $.Values.celery.imagePullPolicy }}
        command:
          - tini
          - --
        args:
          - /bin/bash
          - -c
          - "mkdir -p /metrics && compute-tasks-backend"
        resources:
          {{ $.Values.celery.backend.resources | toYaml | trimSuffix "\n" | nindent 10 }}
        env:
          - name: PROVISIONER_BACKEND
            value: {{ $.Release.Name }}-provisioner.{{ $.Release.Namespace }}.svc:{{ $.Values.provisioner.backendPort }}
          - name: INTERNAL_LB
            value: {{ template "traefik.fullname" $ }}.{{ $.Release.Namespace }}.svc
          - name: API_USERNAME
            value: {{ $.Values.wps.apiUsername }}
          - name: API_PASSWORD
            value: {{ $.Values.wps.apiPassword }}
          - name: CELERY_BROKER_URL
            value: redis://{{ template "redis.fullname" $ }}-master/0
          - name: CELERY_RESULT_BACKEND
            value: redis://{{ template "redis.fullname" $ }}-master/0
      - name: {{ $.Release.Name }}-celery-{{ .name }}
        image: {{ $.Values.celery.image }}:{{ $.Values.celery.imageTag }}
        imagePullPolicy: {{ $.Values.celery.imagePullPolicy }}
        {{- if not $.Values.development }}
        args: 
          - "-c"
          - "1"
          - "-Q"
          - "{{ .name }}"
          - "-n"
          - "$(HOSTNAME)"
          - "-l"
          - "DEBUG"
        {{- end }}
        {{- if $.Values.development }}
        command:
          - tini
          - --
          - sleep
          - infinity
        {{- end }}
        {{- if not $.Values.development }}
        livenessProbe:
          exec:
            command:
            - bash
            - /healthcheck.sh
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - bash
            - /healthcheck.sh
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        {{- end }}
        {{- if and $.Values.celery.resources (not $.Values.development) (not $.Values.ignoreResources) }}
        resources: {{ $.Values.celery.resources | toYaml | trimSuffix "\n" | nindent 10 }}
        {{- end }}
        {{- if .ports }}
        ports:
        {{- range .ports }}
        - containerPort: {{ .port }}
          protocol: TCP
        {{- end }}
        {{- end }}
        env:
        {{- if $.Values.development }}
        - name: DEV
          value: "1"
        - name: WPS_DEBUG
          value: "1"
        {{- end }}
        - name: PROVISIONER_BACKEND
          value: {{ $.Release.Name }}-provisioner.{{ $.Release.Namespace }}.svc:{{ $.Values.provisioner.backendPort }}
        - name: CELERY_BROKER_URL
          value: redis://{{ template "redis.fullname" $ }}-master/0
        - name: CELERY_RESULT_BACKEND
          value: redis://{{ template "redis.fullname" $ }}-master/0
        - name: PROMETHEUS_HOST
          value: {{ $.Values.wps.prometheus.host }}
        - name: DASK_KUBE_NAMESPACE
          value: {{ $.Values.dask.provisioner.namespace }}
        - name: DASK_SCHEDULER
          value: {{ $.Release.Name }}-dask-scheduler:8786
        - name: DASK_WORKERS
          value: "{{ $.Values.dask.workers }}"
        - name: INTERNAL_LB
          value: {{ template "traefik.fullname" $ }}.{{ $.Release.Namespace }}.svc
        - name: DATA_PATH
          value: {{ $.Values.wps.publicPath }}
        - name: API_USERNAME
          value: {{ $.Values.wps.apiUsername }}
        - name: API_PASSWORD
          value: {{ $.Values.wps.apiPassword }}
        envFrom:
        - secretRef:
            name: {{ template "esgf-compute-wps.fullname" $ }}-app-secret
        volumeMounts:
        - mountPath: /etc/config/dask
          name: dask-volume
        - mountPath: /data/cache
          name: cache-volume
          subPath: cache
        - mountPath: /data/public
          name: public-volume
          subPath: public
        {{- if $.Values.development }}
        - name: devel-volume
          mountPath: /devel
        {{- end }}
      volumes:
      {{- if $.Values.development }}
      - name: devel-volume
        hostPath: 
          path: /opt/cwt/devel
          type: DirectoryOrCreate
      {{- end }}
      - name: dask-volume
        configMap:
          name: {{ $.Release.Name }}-dask-config 
      - name: cache-volume
        persistentVolumeClaim:
          claimName: cache-pvc
      - name: public-volume
        persistentVolumeClaim:
          claimName: public-pvc
---
{{- end }}
