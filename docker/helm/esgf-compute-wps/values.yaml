host: 0.0.0.0
development: false

persistence:
  edask:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/cwt

  shared:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/cwt

  static:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/cwt

  public:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/nfs/cwt

  cache:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/nfs/cwt

  ingress:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/nfs/cwt

  prometheus:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/cwt

  postgresql:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/cwt

  redis:
    storageClassName: slow
    capacity: 10Gi
    path: /opt/cwt

prometheus:
  server:
    prefixURL: /prometheus
    baseURL: /prometheus

    ingress:
      enabled: true
      hosts:
      - /prometheus

      annotations:
        ingress.kubernetes.io/ssl-redirect: "true"
        ingress.kubernetes.io/hsts-max-age: "31536000"
        ingress.kubernetes.io/hsts-include-subdomains: "true"
        ingress.kubernetes.io/force-hsts: "true"

    persistentVolume:
      enabled: true
      existingClaim: prometheus-pvc

traefik:
  serviceType: NodePort

  # Entrypoint SSL
  #ssl:
    #enabled: true
    #enforced: true
    #defaultCert:
    #defaultKey:

  cpuLimit: 200m
  memoryLimit: 256Mi

  rbac:
    enabled: true

  deployment:
    hostPort:
      httpEnabled: true
      httpsEnabled: true

  dashboard:
    enabled: true
    domain: ""

    # Dashboard Authentication
    # See for accepted passwords: https://docs.traefik.io/configuration/entrypoints/#basic-authentication
    # Should be K/V pair e.g. user01: password
    #auth:
    #  basic:

    ingress:
      annotations:
        traefik.frontend.rule.type: PathPrefixStrip
        ingress.kubernetes.io/ssl-redirect: "true"
        ingress.kubernetes.io/hsts-max-age: "31536000"
        ingress.kubernetes.io/hsts-include-subdomains: "true"
        ingress.kubernetes.io/force-hsts: "true"

nginx:
  replicas: 1
  image: nginx
  imageTag: 1.13.8

  resources:
    cpuRequest: 100m
    memoryRequest: 128Mi
    cpuLimit: 200m
    memoryLimit: 512Mi
  
wps:
  replicas: 1
  image: jasonb87/cwt_wps
  imageTag: 2.1.0
  activeUserThreshold: 5
  ingressEnabled: true
  certDownloadEnabled: true
  allowedCIDR: 172.17.0.0/16

  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /wps/metrics
    prometheus.io/port: "8000"
  
  process:
    blacklist: "[]"

  resources:
    cpuRequest: 100m
    memoryRequest: 128Mi
    cpuLimit: 200m
    memoryLimit: 512Mi

  oauth:
    client: ""
    secret: ""

  email:
    host: "localhost"

  ports:
    - name: django
      port: 8000

  ingress:
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/hsts-max-age: "31536000"
      ingress.kubernetes.io/hsts-include-subdomains: "true"
      ingress.kubernetes.io/force-hsts: "true"

celery:
  image: jasonb87/cwt_celery
  imageTag: 2.1.0

  resources:
    # Must quote the memory field otherwise large numbers are rendered in
    # scientific notation which celery does not like. This value is in KiB.
    memory: "1024000"
    cpuRequest: 100m
    memoryRequest: 128Mi
    cpuLimit: 1000m
    memoryLimit: 1Gi

  queues:
  - name: ingress
    replicas: 1
    argsExtra:
      "-c": 1
      "-Q": ingress
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: /metrics
      prometheus.io/port: "8080"
    ports:
      - port: 8080
        name: metrics

  - name: priority-low
    replicas: 1
    argsExtra:
      "-c": 1
      "-Q": priority.low
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: /metrics
      prometheus.io/port: "8080"
    ports:
      - port: 8080
        name: metrics

  - name: priority-high
    replicas: 1
    argsExtra:
      "-c": 1
      "-Q": priority.high
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: /metrics
      prometheus.io/port: "8080"
    ports:
      - port: 8080
        name: metrics

thredds:
  replicas: 1
  image: jasonb87/cwt_thredds
  imageTag: 4.6.10

  resources:
    cpuRequest: 100m
    memoryRequest: 128Mi
    cpuLimit: 1000m
    memoryLimit: 512Mi

  ingress:
    path: /threddsCWT
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/hsts-max-age: "31536000"
      ingress.kubernetes.io/hsts-include-subdomains: "true"
      ingress.kubernetes.io/force-hsts: "true"

postgresql:
  postgresPassword: abcd1234

  persistence:
    enabled: true
    existingClaim: postgresql-pvc

redis:
  image:
    repository: redis
    tag: 4.0.10

  cluster:
    enabled: false

  usePassword: false

  persistence:
    existingClaim: redis-pvc

  master:
    service:
      type: ClusterIP

    securityContext:
      enabled: false

edask:
  enabled: false
  replicas: 1
  image: jasonb87/cwt_edask
  imageTag: latest

  timeout: 30

  resources:
    cpuRequest: 100m
    memoryRequest: 128Mi
    cpuLimit: 500m
    memoryLimit: 512Gi

  dask:
    scheduler:
      replicas: 1

      resources:
        cpuRequest: 100m
        memoryRequest: 128Mi
        cpuLimit: 500m
        memoryLimit: 512Gi

    worker:
      replicas: 1

      resources:
        cpuRequest: 100m
        memoryRequest: 128Mi
        cpuLimit: 500m
        memoryLimit: 512Gi

cog:
  enabled: false
  replicas: 1
  image: jasonb87/cwt_cog
  imageTag: latest

  resources:
    cpuRequest: 100m
    memoryRequest: 128Mi
    cpuLimit: 1000m
    memoryLimit: 256Mi

  ingress:
    annotations:
      ingress.kubernetes.io/ssl-redirect: "true"
      ingress.kubernetes.io/hsts-max-age: "31536000"
      ingress.kubernetes.io/hsts-include-subdomains: "true"
      ingress.kubernetes.io/force-hsts: "true"
