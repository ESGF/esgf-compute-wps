# Disables health/readiness checks and persistent storage.
development: true

persistence:
  dataClaimName: data-dev-pvc

  volumes:
    data-dev:
      storageClassName: slow
      capacity: 100Gi
      path: /p/cscratch/nimbus/wps-dev/data

kubeMonitor:
  # Sets kube-monitor container to development mode
  # 
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=kube-monitor --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # compute-kube-monitor
  #
  # development: true

  image: aims2.llnl.gov/compute-kube-monitor
  imageTag: ad06a0ce
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

provisioner:
  # Sets provisioner container to development mode
  # 
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=provisioner --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # compute-provisioner
  #
  # development: true

  image: aims2.llnl.gov/compute-provisioner
  imageTag: 0.1.0
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  workers: 2

  lifetime: 240

nginx:
  # Sets the nginx container to development mode
  # 
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=nginx --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # bash entrypoint.sh
  #
  # development: true

  image: aims2.llnl.gov/compute-webapp
  imageTag: f0a4afa9
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  ingress:
    labels:
      traffic-type: development

wps:
  # Sets the wps container to development mode
  #
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=wps --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # bash entrypoint.sh
  # 
  # development: true

  image: aims2.llnl.gov/compute-wps
  imageTag: bcc2e8bd
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  ingress:
    external:
      labels:
        traffic-type: development
    internal:
      labels:
        traffic-type: development

celery:
  # Sets the celery container to development mode
  #
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=celery --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME -c compute-celery-ingress /bin/bash
  # bash entrypoint.sh -c 1 -Q ingress -n ingress -l INFO
  # 
  # development: true

  image: aims2.llnl.gov/compute-celery
  imageTag: d2afe923
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  # backend:
  # #   Sets the celery backend container to development mode
  # #
  # # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=celery --template "{{range .items}}{{.metadata.name}}{{end}}")
  # # kubectl exec -it $POD_NAME -c compute-celery-ingress-backend /bin/bash
  # # compute-tasks-backend
  # #
  #   development: true

thredds:
  image: aims2.llnl.gov/compute-thredds
  imageTag: f5a5ae82
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  ingress:
    labels:
      traffic-type: development

redis:
  master:
    persistence:
      enabled: false

postgresql:
  persistence:
    enabled: false
