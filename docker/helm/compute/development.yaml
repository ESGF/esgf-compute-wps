# Disables health/readiness checks and persistent storage.
development: true

persistence:
  dataClaimName: data-dev-pvc

  volumes: 
    data-dev:
      storageClassName: slow
      capacity: 100Gi
      path: /p/cscratch/nimbus/wps-dev/data

kubeMonitor:
  # Sets kube-monitor container to development mode
  # 
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=kube-monitor --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # compute-kube-monitor
  #
  # development: true

  imagePullPolicy: IfNotPresent

provisioner:
  # Sets provisioner container to development mode
  # 
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=provisioner --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # compute-provisioner
  #
  # development: true

  imagePullPolicy: IfNotPresent

  workers: 2

  lifetime: 240

nginx:
  # Sets the nginx container to development mode
  # 
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=nginx --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # bash entrypoint.sh
  #
  # development: true

  imagePullPolicy: IfNotPresent

  ingress:
    labels:
      traffic-type: development

wps:
  # Sets the wps container to development mode
  #
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=wps --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # bash entrypoint.sh
  # 
  # development: true

  imagePullPolicy: IfNotPresent

  externalHost: 10.5.5.5

  prometheus:
    host: 

  oauth:
    client: client
    secret: secret

  apiUsername: wps_api_user
  apiPassword: changeit

  adminEmail: test@test.hello

  email:
    host: dasda

  ingress:
    external:
      labels:
        traffic-type: development
    internal:
      labels:
        traffic-type: development

celery:
  # Sets the celery container to development mode
  #
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=celery --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME -c compute-celery-ingress /bin/bash
  # bash entrypoint.sh -c 1 -Q ingress -n ingress -l INFO
  # 
  # development: true

  imagePullPolicy: IfNotPresent

  prometheusUrl: adsadas

  backend: {}
  #   Sets the celery backend container to development mode
  #
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=celery --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME -c compute-celery-ingress-backend /bin/bash
  # compute-tasks-backend
  #
  #   development: true

thredds:
  ingress:
    labels:
      traffic-type: development

redis:
  master:
    persistence:
      enabled: false

postgresql:
  postgresqlPassword: abcd1234

  persistence:
    enabled: false
